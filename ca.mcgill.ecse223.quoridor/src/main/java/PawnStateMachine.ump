namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;

    pawnSM {
    	CanMove{
    		if(MakeMove()){
    		approved [isLegalStep(MoveDirection dir) == false && isLegalJump(MoveDirection dir) == false] -> CantMoveAndJump;
    		approved [isLegalStep(MoveDirection dir) == true && isLegalJump(MoveDirection dir) == false] -> CanMove;
   			approved [isLegalStep(MoveDirection dir) == false && isLegalJump(MoveDirection dir) == true] -> CanJump;
   			approved [isLegalStep(MoveDirection dir) == true && isLegalJump(MoveDirection dir) == true] -> CanMoveAndJump;
    		}
    		else if(MakeJump()){
    			illegalJump();
    		}
    	}
    	CanJump{
    		if(MakeJump()){
    		approved [isLegalStep(MoveDirection dir) == false && isLegalJump(MoveDirection dir) == false] -> CantMoveAndJump;
    		approved [isLegalStep(MoveDirection dir) == true && isLegalJump(MoveDirection dir) == false] -> CanMove;
   			approved [isLegalStep(MoveDirection dir) == false && isLegalJump(MoveDirection dir) == true] -> CanJump;
   			approved [isLegalStep(MoveDirection dir) == true && isLegalJump(MoveDirection dir) == true] -> CanMoveAndJump;
    		}
    		else if(MakeMove()){
    			illegalMove();
    		}
    	}
    	CanMoveAndJump{
    		if(MakeMove()||MakeJump()){
    		approved [isLegalStep(MoveDirection dir) == false && isLegalJump(MoveDirection dir) == false] -> CantMoveAndJump;
    		approved [isLegalStep(MoveDirection dir) == true && isLegalJump(MoveDirection dir) == false] -> CanMove;
   			approved [isLegalStep(MoveDirection dir) == false && isLegalJump(MoveDirection dir) == true] -> CanJump;
   			approved [isLegalStep(MoveDirection dir) == true && isLegalJump(MoveDirection dir) == true] -> CanMoveAndJump;
    		}
    	}
    	CantMoveAndJump{
   			if(MakeMove()){
   				illegalMove();
   			}
   			if(MakeJump()){
   				illegalJump();
   			}
    	}
	}

    // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() { 
    	throw new RuntimeException("this is a illegal move");
    }
    void MakeMove(){
    }
    void MakeJump(){
    }
    void illegalJump(){
    	throw new RuntimeException("this is a illegal Jump");
    }
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North; }
}
